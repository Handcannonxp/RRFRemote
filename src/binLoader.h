// Copyright (c) F4HWN Armel. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#include <pgmspace.h>  // PROGMEM support header

PROGMEM const uint8_t ram[] = {
  0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x40, 0x08, 0x03, 0x00, 0x00, 0x00, 0x9d, 0xb7, 0x81, 0xec, 0x00, 0x00, 0x01, 0x77, 0x50,
  0x4c, 0x54, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xb1, 0x24, 0x00, 0x00, 0x00, 0x2d, 0x58, 0x72, 0xff, 0x90,
  0x1e, 0x1d, 0x48, 0x59, 0xf0, 0xa7, 0x22, 0xff, 0x6d, 0x3a, 0xff, 0xff, 0xff, 0x41, 0x2d, 0x09, 0xff, 0xa2, 0x21,
  0x41, 0x25, 0x07, 0x33, 0x23, 0x07, 0x07, 0x11, 0x15, 0x0b, 0x15, 0x1b, 0xfb, 0xfc, 0xfc, 0xeb, 0x64, 0x35, 0xeb,
  0x85, 0x1c, 0x11, 0x0a, 0x02, 0xf5, 0xf7, 0xf8, 0xfd, 0xfd, 0xfe, 0x36, 0x60, 0x79, 0x05, 0x0c, 0x0f, 0x10, 0x07,
  0x04, 0x57, 0x7a, 0x8e, 0x83, 0x9c, 0xac, 0x77, 0x33, 0x1b, 0x77, 0x43, 0x0e, 0xc5, 0xd1, 0xd8, 0x2f, 0x59, 0x74,
  0xdd, 0x5e, 0x32, 0xc3, 0x53, 0x2c, 0xaa, 0x49, 0x27, 0xdd, 0x7d, 0x1a, 0xc3, 0x6e, 0x17, 0xaa, 0x60, 0x14, 0x44,
  0x1d, 0x0f, 0x04, 0x09, 0x0b, 0x44, 0x26, 0x08, 0x05, 0x04, 0x01, 0xb8, 0xc7, 0xcf, 0x96, 0xac, 0xb9, 0x8d, 0xa5,
  0xb3, 0x88, 0xa1, 0xaf, 0xf3, 0xab, 0x26, 0x2b, 0x19, 0x05, 0xb5, 0xc4, 0xcd, 0x38, 0x24, 0x07, 0x06, 0x04, 0x01,
  0xee, 0xf2, 0xf4, 0xea, 0xee, 0xf1, 0x7f, 0x99, 0xa9, 0x5e, 0x7f, 0x93, 0x51, 0x74, 0x89, 0x2a, 0x55, 0x6d, 0x24,
  0x50, 0x65, 0x0f, 0x1c, 0x25, 0x0d, 0x1a, 0x22, 0xa9, 0xbb, 0xc5, 0x48, 0x6d, 0x82, 0x22, 0x4e, 0x62, 0x33, 0x1d,
  0x06, 0xe1, 0xe8, 0xeb, 0x79, 0x95, 0xa5, 0x6d, 0x8b, 0x9c, 0x64, 0x85, 0x98, 0xcb, 0x8e, 0x20, 0xdb, 0x98, 0x1f,
  0xcc, 0x73, 0x18, 0x9c, 0x58, 0x12, 0xd9, 0xe1, 0xe5, 0xac, 0xbd, 0xc8, 0x92, 0xa8, 0xb5, 0x73, 0x90, 0xa1, 0x67,
  0x86, 0x99, 0x3c, 0x63, 0x74, 0x35, 0x5c, 0x6d, 0x20, 0x4a, 0x5b, 0xc9, 0xd4, 0xda, 0xae, 0xbf, 0xc9, 0x3f, 0x66,
  0x7e, 0x2d, 0x55, 0x64, 0x28, 0x4d, 0x64, 0x18, 0x30, 0x3e, 0xcc, 0x57, 0x2e, 0xbb, 0x50, 0x2b, 0xb0, 0x4b, 0x28,
  0x9d, 0x43, 0x24, 0x9b, 0x42, 0x23, 0xff, 0x99, 0x1f, 0x6e, 0x2f, 0x19, 0x0a, 0x13, 0x18, 0xbb, 0x6a, 0x16, 0xb1,
  0x64, 0x15, 0x68, 0x49, 0x12, 0x50, 0x22, 0x12, 0x3f, 0x1b, 0x0e, 0x6e, 0x3e, 0x0d, 0x51, 0x2e, 0x0a, 0x41, 0x94,
  0x3f, 0x46, 0x00, 0x00, 0x00, 0x1b, 0x74, 0x52, 0x4e, 0x53, 0x00, 0x88, 0x54, 0xee, 0xbc, 0x96, 0x21, 0x14, 0x0d,
  0xcc, 0x92, 0x61, 0x04, 0x7e, 0x4e, 0xf9, 0xf4, 0xdd, 0xdc, 0xb2, 0x72, 0x65, 0x5a, 0x35, 0x33, 0x2f, 0x28, 0xcd,
  0x8c, 0x22, 0xea, 0x00, 0x00, 0x03, 0x30, 0x49, 0x44, 0x41, 0x54, 0x58, 0xc3, 0xed, 0x97, 0x67, 0x57, 0xe2, 0x50,
  0x10, 0x86, 0x6d, 0x18, 0xb1, 0xf7, 0x3a, 0x17, 0xd7, 0xeb, 0xaa, 0x1b, 0x85, 0x20, 0x16, 0x30, 0x1a, 0x45, 0x50,
  0x7a, 0x93, 0x15, 0x94, 0x26, 0xd8, 0xdb, 0xda, 0x7b, 0xfb, 0xf1, 0x3b, 0x49, 0x40, 0xf1, 0x10, 0x77, 0x05, 0xdc,
  0x73, 0xf6, 0x03, 0xcf, 0x17, 0xde, 0x5c, 0x92, 0x27, 0x99, 0x84, 0x13, 0x66, 0xca, 0x4a, 0x7c, 0x19, 0xf5, 0x75,
  0xb5, 0x2a, 0x55, 0x7b, 0x8d, 0x94, 0x1b, 0xcb, 0x55, 0xaa, 0x86, 0x6a, 0x29, 0x76, 0x61, 0x2c, 0xef, 0x92, 0x62,
  0x75, 0x03, 0xc6, 0x46, 0x29, 0xd6, 0xb4, 0xab, 0x54, 0xb5, 0x75, 0xf5, 0xef, 0x04, 0x6d, 0x20, 0xd2, 0x22, 0x1a,
  0x1a, 0xa4, 0xd8, 0xdc, 0x2b, 0xaa, 0x2c, 0x80, 0x58, 0x2a, 0x30, 0xf6, 0x36, 0x83, 0x48, 0xb9, 0x78, 0x7c, 0xab,
  0x14, 0xdb, 0xb2, 0x8f, 0xef, 0x01, 0xc7, 0x9d, 0x20, 0xbc, 0x40, 0x07, 0x5e, 0x4b, 0x93, 0xf6, 0x5e, 0x10, 0xa6,
  0x41, 0x85, 0xcb, 0x6a, 0x48, 0x09, 0x42, 0x0a, 0xd4, 0x18, 0x55, 0x30, 0x2d, 0x08, 0xf7, 0xda, 0x26, 0x3c, 0x6f,
  0x07, 0xbc, 0x08, 0xc2, 0x9d, 0x03, 0x7a, 0xb2, 0x04, 0x15, 0x30, 0xad, 0xd1, 0x68, 0xe6, 0xc5, 0x13, 0x54, 0xc3,
  0x22, 0xc6, 0x39, 0xa8, 0xc2, 0xe5, 0x4a, 0xad, 0x06, 0xd1, 0x56, 0x62, 0xac, 0x82, 0x39, 0x8c, 0x8b, 0x80, 0xa5,
  0x95, 0xc3, 0x3c, 0xc6, 0x69, 0xa8, 0x28, 0x09, 0xb2, 0x04, 0x35, 0x4c, 0x1d, 0x3c, 0x8f, 0x8d, 0x8d, 0xa5, 0xa0,
  0x96, 0x61, 0xba, 0x61, 0x08, 0x63, 0x12, 0xaa, 0x18, 0x86, 0xa9, 0xd4, 0x8e, 0x21, 0xda, 0x4a, 0x8c, 0x55, 0x90,
  0xc4, 0x38, 0x04, 0xdd, 0x0c, 0x53, 0x0b, 0x29, 0x8c, 0xcf, 0x50, 0xc7, 0xc8, 0xbf, 0x9b, 0xce, 0x16, 0x28, 0x98,
  0x96, 0x4e, 0xf1, 0xea, 0xdd, 0xae, 0xc1, 0x02, 0x71, 0xb9, 0xb1, 0x0e, 0xb5, 0x25, 0xd1, 0x57, 0x30, 0x09, 0x8b,
  0xba, 0xac, 0xc9, 0xd1, 0x57, 0x04, 0x0e, 0x4b, 0x19, 0x0c, 0x17, 0x23, 0x18, 0x86, 0xff, 0x4a, 0x60, 0xff, 0xf6,
  0x69, 0xec, 0x0a, 0x82, 0x0d, 0x17, 0xe4, 0xc1, 0xf0, 0x46, 0x8e, 0x60, 0x10, 0x46, 0x7e, 0x28, 0xb2, 0xfa, 0x53,
  0x62, 0x55, 0x24, 0xb3, 0x36, 0x02, 0x83, 0x39, 0x02, 0xb7, 0x99, 0xe4, 0x81, 0xd9, 0x9d, 0x23, 0x80, 0xf1, 0x7c,
  0x04, 0xe3, 0xf0, 0x2f, 0x04, 0xc7, 0xd6, 0x09, 0x22, 0xe2, 0xf4, 0x13, 0xfd, 0x31, 0x21, 0x61, 0x13, 0xc1, 0x85,
  0x34, 0x51, 0xab, 0xc8, 0x11, 0x21, 0x71, 0xeb, 0xa6, 0x33, 0xfe, 0x81, 0x60, 0x82, 0x4e, 0x12, 0x11, 0xba, 0x64,
  0x62, 0x6d, 0x24, 0xce, 0xe9, 0x09, 0x5d, 0xce, 0x08, 0x8c, 0x54, 0x87, 0x78, 0xc9, 0x36, 0x65, 0xbd, 0x1c, 0x5d,
  0x52, 0x12, 0x68, 0x6f, 0x33, 0x02, 0x13, 0x31, 0x51, 0x1b, 0x99, 0xa4, 0xef, 0x04, 0xac, 0xfc, 0xe9, 0xf1, 0xe0,
  0xf7, 0x1e, 0x1d, 0xb9, 0xd5, 0xe6, 0x08, 0x12, 0x27, 0x19, 0x81, 0xce, 0xe6, 0xa5, 0xec, 0x16, 0x4b, 0x59, 0x3f,
  0x0a, 0x02, 0x5e, 0x8e, 0x3b, 0xd4, 0xbf, 0x0a, 0x74, 0x1e, 0x3d, 0x21, 0xbb, 0x21, 0xd3, 0x49, 0x22, 0x47, 0x60,
  0x27, 0x6f, 0x25, 0xc4, 0xe9, 0x56, 0x38, 0x44, 0x77, 0xf4, 0x74, 0xd9, 0xa4, 0xd3, 0xd9, 0x42, 0x9c, 0x91, 0x18,
  0x39, 0x27, 0x12, 0xc0, 0x12, 0xb8, 0x48, 0x28, 0x80, 0x3b, 0xd9, 0xff, 0x28, 0x78, 0x2b, 0x21, 0x46, 0xb7, 0xfc,
  0xfe, 0x4d, 0x36, 0x7d, 0x0f, 0x62, 0x78, 0xf6, 0x43, 0x1d, 0xa5, 0x47, 0x4a, 0x82, 0x87, 0x53, 0x25, 0xc1, 0x12,
  0xe5, 0x44, 0x4c, 0xe9, 0x12, 0xf4, 0x31, 0xac, 0x20, 0xbc, 0x49, 0x03, 0xa7, 0x0f, 0x0a, 0x4f, 0x41, 0x49, 0x10,
  0xa5, 0x3e, 0x42, 0x26, 0xa2, 0x24, 0x2d, 0x08, 0xe0, 0x03, 0xc0, 0x6d, 0xea, 0xfb, 0xe0, 0x31, 0x3a, 0x7d, 0x3e,
  0xdf, 0x0e, 0x0a, 0x08, 0xb5, 0x86, 0x77, 0xa8, 0x0f, 0xef, 0x81, 0x9e, 0xf5, 0xf8, 0x27, 0xd8, 0xc8, 0x8a, 0x91,
  0x5d, 0x11, 0x21, 0x1e, 0x2e, 0xb4, 0x1b, 0xf5, 0x72, 0x7a, 0x25, 0x81, 0x39, 0x40, 0x45, 0xd8, 0x20, 0xdd, 0x0e,
  0x46, 0xa8, 0x71, 0x8f, 0xa5, 0x93, 0xd4, 0x16, 0x8c, 0xb1, 0x94, 0x7a, 0xf7, 0xd6, 0x8c, 0xec, 0x1a, 0x12, 0x0c,
  0xee, 0x47, 0x70, 0x17, 0x9d, 0x3f, 0x68, 0x56, 0x12, 0xf4, 0x67, 0xb1, 0x7f, 0xd0, 0x7f, 0xb0, 0x2f, 0xc7, 0xbd,
  0x5f, 0xfd, 0xd9, 0x1c, 0x84, 0xc5, 0x6d, 0x65, 0x41, 0x1e, 0x28, 0x08, 0xdc, 0xf9, 0x09, 0x2c, 0x0a, 0x2f, 0x94,
  0xf1, 0x91, 0x4f, 0x33, 0x0e, 0x83, 0x45, 0xbe, 0xd2, 0x5c, 0x1b, 0x5f, 0xfa, 0x52, 0x2d, 0x82, 0x75, 0x14, 0xac,
  0x5f, 0x7f, 0x2f, 0x98, 0x6b, 0x49, 0xa0, 0x29, 0x02, 0x14, 0x58, 0x1c, 0xc5, 0x08, 0xf0, 0xcf, 0x55, 0x0d, 0x49,
  0x4d, 0xc1, 0x24, 0x41, 0x2d, 0x35, 0x18, 0x43, 0x05, 0x22, 0x35, 0x18, 0x65, 0x9d, 0xad, 0x50, 0x30, 0x2d, 0x9d,
  0xaf, 0x4d, 0xd6, 0xcd, 0xe8, 0xe8, 0xe8, 0xa5, 0xdc, 0x64, 0x3d, 0x61, 0x3c, 0x93, 0x9b, 0x2c, 0xc3, 0x28, 0x62,
  0x90, 0x9b, 0xac, 0x33, 0x8c, 0x4f, 0x72, 0x93, 0x75, 0x89, 0xf1, 0x46, 0x6a, 0xb2, 0x32, 0x54, 0xc0, 0xd4, 0xc0,
  0xc0, 0xc0, 0xac, 0xdc, 0xe6, 0x2d, 0x60, 0x9c, 0x91, 0xdb, 0x3c, 0xc3, 0x00, 0x62, 0x90, 0xdb, 0xbc, 0x19, 0x8c,
  0x0b, 0x72, 0x9b, 0x37, 0x8b, 0x71, 0x4a, 0xbc, 0xfa, 0x92, 0xe0, 0xfd, 0xc0, 0x71, 0xce, 0xf3, 0x8f, 0xf2, 0xc0,
  0x61, 0xb8, 0xe0, 0xf9, 0xa9, 0xf4, 0xc0, 0x71, 0xc5, 0xf3, 0x57, 0xe9, 0x81, 0x63, 0x8a, 0xe7, 0x2f, 0x0c, 0xf2,
  0xc0, 0xf1, 0xc8, 0xf3, 0xe7, 0x38, 0x70, 0xe4, 0x8e, 0x3c, 0xad, 0x7f, 0x1d, 0x79, 0x1a, 0xb2, 0x46, 0x9e, 0xe2,
  0x87, 0xae, 0x12, 0x5f, 0xc5, 0x6f, 0xb4, 0xb9, 0xa1, 0x38, 0x42, 0x1e, 0x43, 0x25, 0x00, 0x00, 0x00, 0x00, 0x49,
  0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
};

PROGMEM const uint8_t sd[] = {
  0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x40, 0x08, 0x03, 0x00, 0x00, 0x00, 0x9d, 0xb7, 0x81, 0xec, 0x00, 0x00, 0x01, 0x5f, 0x50,
  0x4c, 0x54, 0x45, 0x00, 0x00, 0x00, 0x2c, 0x36, 0x41, 0x2c, 0x36, 0x42, 0x2c, 0x36, 0x42, 0x2c, 0x36, 0x42, 0x2c,
  0x37, 0x42, 0x2f, 0x37, 0x43, 0x2c, 0x36, 0x42, 0x2d, 0x36, 0x42, 0x2e, 0x34, 0x41, 0x25, 0x39, 0x42, 0x2c, 0x36,
  0x42, 0x2c, 0x37, 0x42, 0x2d, 0x37, 0x42, 0x2b, 0x36, 0x41, 0x29, 0x37, 0x45, 0x2c, 0x36, 0x42, 0xff, 0xc5, 0x36,
  0x1e, 0x29, 0x33, 0xff, 0xff, 0xff, 0x26, 0x30, 0x3c, 0x2e, 0x38, 0x43, 0x3a, 0x3f, 0x42, 0x4a, 0x53, 0x5d, 0xfa,
  0xfa, 0xfb, 0x7f, 0x6e, 0x3d, 0x33, 0x3d, 0x48, 0xc7, 0x9e, 0x3a, 0xf4, 0xbc, 0x37, 0x50, 0x58, 0x62, 0x48, 0x49,
  0x40, 0x72, 0x66, 0x3e, 0x8a, 0x76, 0x3c, 0xbf, 0x9a, 0x3a, 0xb1, 0x90, 0x3a, 0xdc, 0xde, 0xe0, 0x8f, 0x94, 0x9b,
  0x98, 0x7f, 0x3c, 0xcb, 0xa1, 0x39, 0xda, 0xac, 0x38, 0x5f, 0x66, 0x6f, 0x55, 0x5d, 0x67, 0x44, 0x4d, 0x57, 0x80,
  0x6f, 0x3e, 0xfe, 0xfe, 0xfe, 0xf8, 0xf8, 0xf8, 0xb8, 0xbb, 0xbf, 0xa7, 0xab, 0xb0, 0x83, 0x8a, 0x90, 0x63, 0x6b,
  0x73, 0x3e, 0x47, 0x52, 0x39, 0x43, 0x4e, 0x23, 0x2d, 0x38, 0xf2, 0xf3, 0xf4, 0xc8, 0xca, 0xce, 0xaf, 0xb3, 0xb7,
  0xab, 0xaf, 0xb3, 0x9f, 0xa4, 0xa9, 0x93, 0x98, 0x9e, 0x70, 0x77, 0x7f, 0x6a, 0x71, 0x79, 0x5a, 0x62, 0x6c, 0x47,
  0x50, 0x5a, 0x36, 0x3f, 0x4b, 0xe7, 0xe8, 0xea, 0xe2, 0xe3, 0xe5, 0xc5, 0xc8, 0xcb, 0xc1, 0xc4, 0xc7, 0x8b, 0x91,
  0x97, 0x72, 0x79, 0x81, 0xba, 0x96, 0x3a, 0xed, 0xee, 0xef, 0xea, 0xeb, 0xec, 0xe5, 0xe7, 0xe8, 0xd6, 0xd8, 0xda,
  0xa3, 0xa8, 0xad, 0x9e, 0xa3, 0xa8, 0x9c, 0xa1, 0xa6, 0x87, 0x8d, 0x94, 0x80, 0x86, 0x8d, 0x7b, 0x81, 0x88, 0x76,
  0x7d, 0x85, 0x4e, 0x56, 0x60, 0x31, 0x3a, 0x44, 0x5f, 0x59, 0x3f, 0x6b, 0x61, 0x3e, 0x7c, 0x6c, 0x3d, 0xc4, 0x9d,
  0x39, 0xad, 0xb1, 0xb6, 0x99, 0x9d, 0xa3, 0x6d, 0x74, 0x7c, 0x41, 0x4a, 0x55, 0x46, 0x47, 0x41, 0x40, 0x44, 0x41,
  0x36, 0x3c, 0x41, 0x2b, 0x35, 0x41, 0x4e, 0x4e, 0x40, 0x56, 0x52, 0x3f, 0x2a, 0x34, 0x3f, 0x77, 0x69, 0x3e, 0x85,
  0x72, 0x3d, 0xad, 0x8e, 0x3b, 0x9e, 0x84, 0x3b, 0xd6, 0xa9, 0x38, 0xee, 0xba, 0x37, 0xcf, 0xd1, 0xd4, 0xcd, 0xd0,
  0xd3, 0xba, 0xbe, 0xc1, 0xb2, 0xb6, 0xba, 0x68, 0x70, 0x78, 0x40, 0x49, 0x54, 0x52, 0x50, 0x40, 0x73, 0x66, 0x3e,
  0x94, 0x7c, 0x3c, 0xd2, 0xa6, 0x39, 0xe0, 0xb0, 0x38, 0xf8, 0xc0, 0x37, 0x92, 0x9d, 0x80, 0xe5, 0x00, 0x00, 0x00,
  0x10, 0x74, 0x52, 0x4e, 0x53, 0x00, 0x4b, 0xfe, 0xd7, 0xf5, 0x46, 0x15, 0xf0, 0x77, 0x27, 0x0d, 0xe3, 0xad, 0x9a,
  0x8d, 0x25, 0x3c, 0x59, 0xc3, 0x2a, 0x00, 0x00, 0x02, 0x5d, 0x49, 0x44, 0x41, 0x54, 0x58, 0xc3, 0xed, 0xd7, 0x57,
  0x73, 0xd3, 0x40, 0x14, 0x05, 0x60, 0x6c, 0x27, 0x81, 0x50, 0x8f, 0x59, 0x24, 0x39, 0x12, 0x4e, 0x93, 0x00, 0xc9,
  0x72, 0x77, 0xdc, 0x5b, 0xdc, 0x12, 0xf7, 0x5e, 0xd2, 0x2b, 0x24, 0xf4, 0xfe, 0xff, 0x87, 0x15, 0x98, 0x37, 0x6c,
  0x59, 0xf1, 0x0b, 0xf1, 0xf8, 0xcc, 0x68, 0xef, 0x8c, 0xa4, 0xfd, 0x66, 0x76, 0xf6, 0xee, 0xc3, 0xde, 0x99, 0xcd,
  0xdc, 0x7f, 0xfc, 0x00, 0xe3, 0x62, 0xb6, 0x98, 0xc6, 0xce, 0x5f, 0xb6, 0x40, 0x2f, 0x0b, 0x4b, 0x63, 0xe6, 0x9b,
  0xee, 0xa2, 0x3b, 0x10, 0x06, 0x5d, 0x60, 0x5d, 0x10, 0x76, 0x8e, 0x71, 0xb2, 0x29, 0x08, 0x57, 0xc0, 0xf9, 0x86,
  0x30, 0xe8, 0x01, 0x2b, 0xf4, 0xdd, 0x11, 0xb0, 0x38, 0x7a, 0xfe, 0x3d, 0x33, 0xb0, 0x63, 0xb5, 0x5a, 0x05, 0x30,
  0x56, 0x9a, 0xd7, 0xe8, 0x69, 0xe5, 0x08, 0x6f, 0xe8, 0x78, 0x0d, 0xbc, 0xa5, 0xe5, 0x1b, 0x60, 0x1a, 0xb9, 0xfc,
  0x87, 0xa0, 0xd9, 0xa0, 0x7f, 0xbd, 0xfc, 0x03, 0xac, 0x63, 0x4d, 0x2b, 0xab, 0xd8, 0xa4, 0xe3, 0x2b, 0xe0, 0x39,
  0x2d, 0x2f, 0x46, 0x03, 0x4f, 0x2c, 0x98, 0x0a, 0xa0, 0xcb, 0x9f, 0x0a, 0xa0, 0xcb, 0x9f, 0x0a, 0x78, 0x04, 0x80,
  0x61, 0xd9, 0x1b, 0x03, 0xcb, 0x00, 0xce, 0xe8, 0xf7, 0xef, 0xe6, 0x1b, 0x02, 0x26, 0x00, 0x2b, 0x56, 0x1a, 0xf6,
  0x3f, 0x00, 0xb4, 0xa6, 0xd9, 0x81, 0x59, 0x6b, 0x9a, 0x4b, 0x74, 0xe9, 0xf8, 0x93, 0xc5, 0x15, 0x2d, 0x02, 0xf0,
  0x43, 0x6b, 0x2e, 0x5d, 0x80, 0xed, 0xab, 0x7d, 0x16, 0x38, 0x53, 0xd5, 0x35, 0x06, 0xe8, 0xa9, 0xea, 0x39, 0x70,
  0x72, 0xa9, 0xf6, 0x8f, 0x81, 0xd5, 0x15, 0xf5, 0x2b, 0xa3, 0x0b, 0xe8, 0x65, 0x0e, 0x8c, 0x03, 0xbe, 0xd0, 0x6d,
  0xbe, 0x36, 0x4f, 0x01, 0xa0, 0xc3, 0xb2, 0x0c, 0xa6, 0x01, 0xb4, 0xcc, 0x81, 0x19, 0x02, 0x02, 0x5e, 0x4f, 0x25,
  0x9f, 0x02, 0xf2, 0x92, 0x24, 0xd5, 0x0f, 0x78, 0xc3, 0x00, 0xb7, 0x4b, 0x68, 0x5c, 0x01, 0xd8, 0x88, 0x96, 0x60,
  0xd3, 0x28, 0x10, 0x26, 0x6e, 0x87, 0x23, 0x2e, 0x81, 0x02, 0x2d, 0x5f, 0x3c, 0xe2, 0x74, 0x16, 0x0c, 0x02, 0x39,
  0xe2, 0x49, 0x03, 0xd0, 0x00, 0x07, 0x00, 0x89, 0x88, 0x06, 0x81, 0xb8, 0x93, 0xd8, 0xb2, 0x75, 0xff, 0x5f, 0xe0,
  0x90, 0x90, 0xb4, 0x31, 0x00, 0xf2, 0x5e, 0x91, 0x90, 0x5d, 0x6e, 0x08, 0xf8, 0x09, 0x09, 0x18, 0xdf, 0x46, 0xa5,
  0x4c, 0x6a, 0x43, 0xc0, 0x4b, 0x4a, 0x30, 0x06, 0x34, 0xa3, 0xed, 0x4e, 0x3a, 0x47, 0x62, 0x14, 0x90, 0x53, 0xc9,
  0x7d, 0x17, 0x69, 0x18, 0x04, 0x42, 0x84, 0x38, 0x09, 0x29, 0xf9, 0x87, 0xdb, 0x68, 0x93, 0x60, 0x10, 0xe0, 0x5b,
  0x91, 0x9c, 0x3b, 0x1f, 0x00, 0x3c, 0x91, 0x48, 0xa4, 0xd6, 0x38, 0xbc, 0x55, 0x67, 0x81, 0x57, 0x80, 0x94, 0xd2,
  0xee, 0x00, 0x8c, 0xc2, 0xc0, 0xa1, 0x70, 0xcc, 0x67, 0xbb, 0xdd, 0x1e, 0xa0, 0x0f, 0x6f, 0x57, 0xfc, 0x13, 0x00,
  0x0d, 0x67, 0x12, 0xe1, 0x72, 0xae, 0x24, 0xd3, 0x66, 0x4a, 0x20, 0x2a, 0x86, 0x44, 0x6f, 0xd6, 0xf5, 0x21, 0xee,
  0x72, 0xbb, 0xb9, 0x4c, 0x56, 0xf4, 0xe8, 0x02, 0x8c, 0x28, 0xb9, 0x11, 0xf6, 0xa2, 0xf0, 0x1e, 0xef, 0xf2, 0x21,
  0x44, 0x63, 0x10, 0x65, 0x6e, 0x1b, 0x5c, 0xb0, 0xd9, 0x42, 0xc6, 0xce, 0x05, 0x75, 0x81, 0x4f, 0xc5, 0x98, 0x2d,
  0x45, 0x81, 0x44, 0x39, 0x19, 0x94, 0x5c, 0x4a, 0xb4, 0x28, 0x86, 0xf8, 0xdf, 0x40, 0xdd, 0x8b, 0x8c, 0xb8, 0x1b,
  0xd3, 0x05, 0x42, 0xb1, 0xc2, 0x5e, 0x25, 0x9c, 0xf5, 0x6c, 0x1f, 0xb8, 0x6b, 0x85, 0xca, 0xc7, 0xe8, 0x3e, 0x0f,
  0x68, 0x80, 0xab, 0x5a, 0xb5, 0x67, 0x92, 0x9e, 0xaa, 0x1e, 0xc0, 0xf8, 0x18, 0x04, 0x92, 0x6d, 0x9f, 0xcf, 0x0f,
  0x99, 0x47, 0x5a, 0xe6, 0x52, 0x00, 0x78, 0x1f, 0xf8, 0x44, 0x22, 0xe1, 0x97, 0xd3, 0xbc, 0x8f, 0xb9, 0x05, 0x7d,
  0x30, 0x07, 0xa6, 0x05, 0x4e, 0x9f, 0xe9, 0xe6, 0x74, 0x1c, 0x70, 0xf1, 0x74, 0x82, 0x5c, 0x8c, 0x00, 0x16, 0x01,
  0x6c, 0x4d, 0x02, 0x6c, 0xe1, 0xdf, 0x97, 0xae, 0xa5, 0x85, 0x49, 0x81, 0x51, 0xd7, 0x3e, 0x93, 0xc5, 0x3c, 0x19,
  0xa0, 0x5d, 0x3c, 0x67, 0x29, 0xbf, 0x00, 0x9d, 0x4c, 0xdc, 0x7b, 0x81, 0xd8, 0x08, 0x11, 0x00, 0x00, 0x00, 0x00,
  0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
};

PROGMEM const uint8_t hdmiplug[] = {
  0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x40, 0x08, 0x03, 0x00, 0x00, 0x00, 0x9d, 0xb7, 0x81, 0xec, 0x00, 0x00, 0x01, 0xa4, 0x50,
  0x4c, 0x54, 0x45, 0x00, 0x00, 0x00, 0x2d, 0x50, 0x6b, 0x36, 0x5e, 0x7d, 0x2d, 0x50, 0x6a, 0xf4, 0xdd, 0x45, 0x3b,
  0x65, 0x84, 0x40, 0x71, 0x93, 0xec, 0xbd, 0x44, 0xf3, 0xce, 0x3a, 0x38, 0x63, 0x82, 0x40, 0x6f, 0x93, 0x3a, 0x67,
  0x85, 0xe9, 0xaf, 0x52, 0x3b, 0x67, 0x87, 0x35, 0x5d, 0x7d, 0xf0, 0xcf, 0x37, 0x3a, 0x63, 0x85, 0xec, 0xc4, 0x40,
  0x2c, 0x51, 0x6b, 0x37, 0x62, 0x82, 0x39, 0x63, 0x84, 0xeb, 0xba, 0x46, 0x2e, 0x53, 0x6e, 0x30, 0x53, 0x6f, 0x38,
  0x61, 0x82, 0x3a, 0x68, 0x80, 0x3f, 0x70, 0x93, 0x36, 0x5e, 0x7d, 0xf0, 0xcf, 0x39, 0xf1, 0xd2, 0x4a, 0xf1, 0xd3,
  0x3c, 0xee, 0xc9, 0x32, 0xe9, 0xb4, 0x4a, 0xee, 0xc9, 0x33, 0x2d, 0x51, 0x6b, 0x2d, 0x51, 0x6c, 0x2d, 0x50, 0x6c,
  0xee, 0xcb, 0x35, 0x32, 0x5a, 0x78, 0xeb, 0xbb, 0x47, 0x39, 0x65, 0x83, 0x2f, 0x53, 0x6d, 0x5d, 0x72, 0x71, 0xef,
  0xcc, 0x36, 0x50, 0x6d, 0x74, 0x33, 0x57, 0x75, 0x37, 0x5e, 0x7c, 0xeb, 0xbd, 0x44, 0x31, 0x53, 0x6f, 0xf1, 0xcf,
  0x37, 0x30, 0x52, 0x71, 0x41, 0x6f, 0x93, 0xeb, 0xc0, 0x3f, 0x37, 0x5e, 0x7e, 0xed, 0xca, 0x3e, 0xeb, 0xcc, 0x3d,
  0x36, 0x5e, 0x7d, 0xf4, 0xdd, 0x45, 0x2b, 0x4d, 0x66, 0x40, 0x70, 0x93, 0xef, 0xec, 0xef, 0xe7, 0xa5, 0x61, 0xec,
  0xc3, 0x2e, 0x33, 0x5a, 0x77, 0xf1, 0xd2, 0x3b, 0x32, 0x58, 0x74, 0xac, 0xb8, 0xc6, 0x82, 0x90, 0x67, 0x6a, 0x86,
  0x9d, 0x2d, 0x51, 0x6c, 0x40, 0x6f, 0x91, 0x3c, 0x69, 0x8a, 0xf1, 0xd2, 0x4b, 0xbd, 0xc6, 0xd0, 0x54, 0x76, 0x90,
  0xed, 0xeb, 0xee, 0xc2, 0xca, 0xd3, 0xb9, 0xc3, 0xce, 0x59, 0x79, 0x93, 0x3b, 0x61, 0x80, 0xeb, 0xb5, 0x58, 0xe9,
  0xb5, 0x45, 0xe9, 0xe8, 0xeb, 0xe4, 0xe3, 0xe8, 0x74, 0x8e, 0xa3, 0x41, 0x66, 0x84, 0xed, 0xc6, 0x30, 0xdc, 0xdd,
  0xe3, 0x8e, 0xa2, 0xb3, 0x68, 0x85, 0x9d, 0x2d, 0x51, 0x6b, 0x7e, 0x86, 0x5d, 0xeb, 0xb6, 0x59, 0xf3, 0xd8, 0x47,
  0xa2, 0xb1, 0xc0, 0x93, 0xa6, 0xb7, 0x3e, 0x6d, 0x8f, 0x7c, 0x7a, 0x72, 0xe8, 0xa9, 0x5e, 0x7d, 0x88, 0x58, 0x8a,
  0x91, 0x56, 0xb1, 0xad, 0x50, 0xbd, 0xb5, 0x4e, 0xdf, 0xe0, 0xe5, 0xd8, 0xda, 0xe1, 0xcf, 0xd3, 0xdc, 0xa5, 0xb4,
  0xc2, 0x99, 0xaa, 0xba, 0x8a, 0x9e, 0xb1, 0x86, 0x9c, 0xaf, 0x6e, 0x89, 0x9f, 0x63, 0x81, 0x99, 0x4f, 0x71, 0x8d,
  0x48, 0x6c, 0x88, 0x42, 0x68, 0x85, 0x3d, 0x64, 0x81, 0xea, 0xb3, 0x5a, 0xf0, 0xca, 0x4f, 0xf3, 0xd5, 0x49, 0xb2,
  0xbd, 0xc9, 0x9d, 0xad, 0xbd, 0x80, 0x96, 0xaa, 0x79, 0x92, 0xa7, 0x39, 0x65, 0x85, 0x39, 0x63, 0x84, 0x80, 0x8c,
  0x63, 0xe7, 0xa6, 0x61, 0xec, 0xba, 0x56, 0xbe, 0xb6, 0x4e, 0xd4, 0xc6, 0x4a, 0xdf, 0xce, 0x48, 0xe9, 0xd5, 0x47,
  0xc7, 0xcd, 0xd6, 0x7e, 0x81, 0x6f, 0xe8, 0xa6, 0x61, 0xe9, 0xb1, 0x5b, 0xeb, 0xb7, 0x43, 0xed, 0xc1, 0x42, 0xf2,
  0xd6, 0x3f, 0xef, 0xcb, 0x35, 0x03, 0x9c, 0x8a, 0xd3, 0x00, 0x00, 0x00, 0x38, 0x74, 0x52, 0x4e, 0x53, 0x00, 0xef,
  0xbd, 0xf5, 0xef, 0xae, 0x6f, 0x6d, 0x3e, 0xd5, 0x98, 0x5c, 0xfc, 0xa4, 0x99, 0x87, 0x33, 0x31, 0xfc, 0xe7, 0xd3,
  0xc4, 0xac, 0xa0, 0x89, 0x0b, 0xfd, 0xfb, 0xf6, 0xf1, 0xf1, 0xef, 0xee, 0xed, 0xe8, 0xe7, 0xe1, 0xd3, 0xca, 0xca,
  0xc8, 0xc7, 0xc5, 0xbd, 0xb2, 0xb0, 0xa8, 0xa6, 0x6e, 0x6a, 0x5a, 0x53, 0x4d, 0x41, 0x1d, 0x19, 0xdf, 0xf4, 0x35,
  0x27, 0x00, 0x00, 0x02, 0x64, 0x49, 0x44, 0x41, 0x54, 0x58, 0xc3, 0xed, 0xd3, 0xf7, 0x5b, 0xd3, 0x40, 0x18, 0xc0,
  0xf1, 0xa0, 0x38, 0x0b, 0xc8, 0x92, 0xe1, 0xde, 0x7b, 0xcf, 0x97, 0xf8, 0x5e, 0x85, 0x5a, 0x11, 0x1b, 0xbb, 0x77,
  0xa1, 0x93, 0x96, 0xb6, 0x40, 0x77, 0x99, 0x82, 0x32, 0xdc, 0xfe, 0xd3, 0x5e, 0x48, 0x13, 0x6b, 0x1f, 0x43, 0x2e,
  0xf5, 0x79, 0x44, 0x9f, 0xa7, 0xdf, 0x1f, 0xae, 0xd7, 0xde, 0xd3, 0x4f, 0xc6, 0x25, 0xdc, 0xef, 0xba, 0x7c, 0xa6,
  0x5d, 0xea, 0x34, 0xa9, 0xb6, 0xd7, 0x3a, 0xe5, 0xfb, 0xd2, 0xc1, 0x31, 0x76, 0xdf, 0x38, 0x3a, 0x22, 0x35, 0x41,
  0x1c, 0x23, 0x72, 0x3e, 0x27, 0xb9, 0xcb, 0x08, 0x1c, 0x53, 0x03, 0x8e, 0xeb, 0x06, 0x16, 0x49, 0xe2, 0xf3, 0x42,
  0xf3, 0x00, 0xed, 0x3d, 0x21, 0xef, 0xc2, 0x0a, 0x70, 0x95, 0x11, 0xb8, 0x49, 0x01, 0x25, 0x07, 0x99, 0x90, 0x26,
  0xdf, 0x9d, 0xe4, 0x1c, 0xc7, 0xd4, 0x53, 0x5f, 0x3d, 0x30, 0x25, 0x03, 0xdf, 0x9c, 0x24, 0xd1, 0xc3, 0x31, 0xf4,
  0xe4, 0xbc, 0xb1, 0x0e, 0x08, 0x2b, 0x67, 0x30, 0xf2, 0x95, 0x90, 0x0e, 0x16, 0xe1, 0xac, 0xd1, 0xd8, 0x78, 0x0f,
  0xa4, 0x46, 0x9d, 0x54, 0xe0, 0x34, 0xeb, 0x31, 0x4a, 0xc0, 0x66, 0x2a, 0xb5, 0x2d, 0xee, 0x42, 0x95, 0xee, 0xc2,
  0x76, 0x2a, 0xb5, 0x49, 0x01, 0x23, 0x21, 0xe4, 0x91, 0x26, 0x70, 0xb8, 0x06, 0x4c, 0xf3, 0xfc, 0x8c, 0xfc, 0x1c,
  0xcc, 0xf0, 0xfc, 0x74, 0x0d, 0x38, 0xf4, 0xf7, 0x80, 0x8d, 0x64, 0x72, 0x8b, 0x02, 0xd5, 0x30, 0x05, 0xb6, 0x92,
  0xc9, 0x0d, 0xbd, 0x80, 0x54, 0xf8, 0x13, 0x21, 0x53, 0xd2, 0x54, 0x37, 0x20, 0xb5, 0xe0, 0x48, 0x90, 0xc5, 0x66,
  0x01, 0xe5, 0x41, 0xfa, 0x9f, 0x80, 0xee, 0xa1, 0xae, 0xae, 0x5b, 0x93, 0xb4, 0xf5, 0x17, 0x4a, 0x1f, 0xe3, 0xf2,
  0x6c, 0x7d, 0x32, 0x1e, 0x8f, 0xdf, 0xe8, 0xba, 0x7d, 0xfd, 0x01, 0xa7, 0xd2, 0xe3, 0x93, 0xc0, 0xd0, 0x18, 0xcf,
  0xdf, 0x53, 0x01, 0xee, 0x00, 0x23, 0x70, 0x49, 0x05, 0xd8, 0xc7, 0x0a, 0xb4, 0xb5, 0x80, 0x5d, 0x81, 0xa0, 0xc9,
  0x0b, 0x60, 0x8f, 0xe4, 0x01, 0x2c, 0x81, 0xc0, 0x7c, 0xde, 0x0e, 0x20, 0x7e, 0x5d, 0xa5, 0xe3, 0x5c, 0x8e, 0x0e,
  0xde, 0xd9, 0x82, 0x06, 0x60, 0xc2, 0x20, 0xfd, 0x2f, 0xbe, 0x06, 0xb0, 0x22, 0x2d, 0x5b, 0x02, 0x00, 0x0f, 0xba,
  0xbc, 0x10, 0x44, 0xa1, 0x04, 0x74, 0x34, 0x69, 0x02, 0x66, 0x00, 0x9b, 0x08, 0xbc, 0xc1, 0xe5, 0x68, 0x16, 0xad,
  0xe2, 0xb1, 0x11, 0x3d, 0xb0, 0x8c, 0xe2, 0x8a, 0x59, 0x17, 0x60, 0x01, 0xaf, 0x1f, 0x8b, 0x3b, 0xe7, 0x62, 0x82,
  0x2c, 0x62, 0x80, 0x0d, 0x70, 0xb9, 0xdd, 0x6e, 0x19, 0x80, 0x59, 0xf4, 0x00, 0xf8, 0x05, 0x21, 0x5d, 0x44, 0x01,
  0x97, 0xd8, 0x00, 0x31, 0x05, 0x98, 0xc3, 0x15, 0x28, 0x63, 0xe6, 0x03, 0x9a, 0x70, 0x09, 0x33, 0xfa, 0x2f, 0x01,
  0xac, 0x18, 0x84, 0x02, 0x5a, 0xa3, 0x28, 0xa0, 0xd9, 0x2f, 0x78, 0x75, 0x03, 0x79, 0xc1, 0x5d, 0x81, 0x1c, 0x46,
  0x6d, 0x88, 0xae, 0x8a, 0x15, 0x0b, 0x3a, 0x01, 0x7f, 0x1a, 0x71, 0x45, 0xba, 0x0f, 0x7e, 0xb4, 0x42, 0x14, 0x73,
  0x0c, 0xc0, 0xbc, 0xcb, 0x02, 0xe0, 0x75, 0x47, 0x00, 0x22, 0x88, 0x98, 0x59, 0x15, 0x7f, 0x4a, 0x97, 0x20, 0xe0,
  0xf2, 0x80, 0xcd, 0xed, 0x81, 0xa2, 0x2b, 0xa0, 0x01, 0x80, 0x5d, 0x19, 0xca, 0xe5, 0x0a, 0x28, 0xd9, 0xe5, 0xcf,
  0x7f, 0xff, 0x65, 0xd2, 0x2e, 0xa4, 0x0e, 0x5c, 0x79, 0xae, 0xdd, 0x58, 0x88, 0x57, 0x07, 0x2e, 0xf0, 0x8c, 0x5d,
  0x54, 0x01, 0x06, 0x59, 0x81, 0x41, 0x4e, 0xa5, 0x81, 0xb6, 0xfd, 0x72, 0xbd, 0x2f, 0xeb, 0x0b, 0x85, 0x42, 0xbd,
  0xca, 0x52, 0xdb, 0x00, 0xc7, 0xd0, 0xd1, 0x67, 0xf5, 0xbd, 0x05, 0x38, 0x52, 0xb7, 0xb8, 0x07, 0xc0, 0xda, 0x1f,
  0x02, 0xe3, 0xd0, 0x04, 0x30, 0xfe, 0xb3, 0xd8, 0x5a, 0x13, 0x40, 0x3f, 0x34, 0xd4, 0xaf, 0x13, 0xe8, 0x6c, 0x04,
  0x3a, 0x75, 0x02, 0xc3, 0x7d, 0xf0, 0x4b, 0x7d, 0xc3, 0x9c, 0xde, 0xba, 0x0d, 0x86, 0xce, 0x58, 0x2c, 0xf6, 0x0a,
  0xe0, 0x9a, 0xc1, 0xd0, 0xcd, 0x35, 0xd5, 0x41, 0xba, 0x03, 0x14, 0x38, 0x40, 0xa7, 0x2d, 0xa0, 0x05, 0xec, 0x21,
  0xf0, 0xf0, 0xc4, 0x0e, 0x30, 0xc4, 0xed, 0xd2, 0x0f, 0x50, 0x20, 0xac, 0xbe, 0x0b, 0xa4, 0x25, 0x60, 0x00, 0x00,
  0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82,
};

long gzUncompressedSize = 0;

// Get uncompressed size for GZIP
uint8_t gzReadByte(fs::File& gzFile, const int32_t addr, fs::SeekMode mode = fs::SeekSet) {
  gzFile.seek(addr, mode);
  return gzFile.read();
}

// Get uncompressed size for GZIP
size_t getUncompressedSize(fs::File& gzFile) {
  size_t output_size = 0;
  size_t gz_size     = gzFile.size();
  gzFile.seek(0);
  if ((gzReadByte(gzFile, 0) == 0x1f) && (gzReadByte(gzFile, 1) == 0x8b)) {
    // GZIP signature matched.  Find real size as encoded at the end
    output_size = gzReadByte(gzFile, gz_size - 4);
    output_size += gzReadByte(gzFile, gz_size - 3) << 8;
    output_size += gzReadByte(gzFile, gz_size - 2) << 16;
    output_size += gzReadByte(gzFile, gz_size - 1) << 24;
  }
  gzFile.seek(0);
  return output_size;
}

// Add insensitive function to prevent case problem
char* stristr(const char* haystack, const char* needle) {
  do {
    const char* h = haystack;
    const char* n = needle;
    while (tolower((unsigned char)*h) == tolower((unsigned char)*n) && *n) {
      h++;
      n++;
    }
    if (*n == 0) {
      return (char*)haystack;
    }
  } while (*haystack++);
  return 0;
}

// List files on LittleFS or SD
void getFileList(File dir, char* media, char* extension) {
  while (true) {
    File entry = dir.openNextFile();
    if (!entry) {
      // no more files
      break;
    }

    if (String(entry.name()).substring(0, 1) != "." && stristr(entry.name(), extension) != NULL) {
      String tmp = String(media) + "/" + String(entry.name());
      Serial.println(tmp);
      strcpy(fileName[fileIndex], tmp.c_str());
      fileIndex++;
    }

    entry.close();
  }
  Serial.println("----------");
}

void myProgressFunction(int state, int size) {
  static int SD_UI_Progress;
  static boolean blink = false;
  uint16_t gauge;

  if (gzUncompressedSize != 0) {
    size = gzUncompressedSize;
  }

  // Serial.printf("%d %d\n", state, size);

  int percent = (state * 100) / size;
  if (percent == SD_UI_Progress) {
    // don't render twice the same value
    return;
  }
  SD_UI_Progress = percent;

  gauge = map(percent, 0, 100, 0, 276);
  if (gauge != 0) {
    for (uint8_t j = 0; j <= 5; j++) {
      M5.Displays(display).drawGradientHLine(22 + offsetX, 30 + offsetY + j, gauge, TFT_BLACK, TFT_RED);
    }

    for (uint16_t j = 1; j < gauge; j++) {
      if (j % 23 == 0) {
        M5.Displays(display).drawFastVLine(22 + offsetX + j, 30 + offsetY, 6, TFT_BLACK);
      }
    }
  }

  M5.Displays(display).drawString(String(percent) + " %", 160 + offsetX, 70 + offsetY);

  if (percent % 2 == 0) {
    if (blink == false) {
      M5.Displays(display).drawString("Loading in progress, please wait...", 160 + offsetX, 50 + offsetY);
      blink = true;
    } else {
      M5.Displays(display).drawString("", 160 + offsetX, 50 + offsetY);
      blink = false;
    }
  }
}

static int myActionTrigger(char* labelLoad, char* labelSkip, char* labelSave, unsigned long waitdelay) {
  return 1;
}

// Bin Loader
void binLoader() {
  fs::File file;

  String tmpName;

  char version[] = "Bin Loader V0.9";

  boolean click = false;
  boolean blink = false;

  static int8_t iconOld = 255;
  static int8_t start   = 0;
  int8_t icon           = 0;
  int8_t pos            = 0;
  int8_t cursor         = 0;
  int8_t stop           = 0;
  int8_t limit          = 8;
  int8_t change         = 255;

  uint16_t gauge = 0;

  if (!LittleFS.begin()) {
    Serial.println("LittleFS Mount Failed");

    M5.Displays(display).fillScreen(TFT_BLACK);

    M5.Displays(display).setFont(&tahoma8pt7b);
    M5.Displays(display).setTextColor(TFT_WHITE, TFT_BLACK);
    M5.Displays(display).setTextDatum(CC_DATUM);
    M5.Displays(display).drawString("BUILD LittleFS", 160 + offsetX, 20 + offsetY);

    M5.Displays(display).drawString("LittleFS Flash File System", 160 + offsetX, 80 + offsetY);
    M5.Displays(display).drawString("needs to be formated.", 160 + offsetX, 100 + offsetY);
    M5.Displays(display).drawString("It takes around 4 minutes.", 160 + offsetX, 140 + offsetY);
    M5.Displays(display).drawString("Please, wait until ", 160 + offsetX, 180 + offsetY);
    M5.Displays(display).drawString("the application starts !", 160 + offsetX, 200 + offsetY);

    Serial.println("LittleFS Formating...");

    LittleFS.format();  // Format LittleFS...
  }

  fileIndex = 0;
  root      = LittleFS.open("/");
  getFileList(root, (char*)"LittleFS", (char*)".bin");
  root = LittleFS.open("/");
  getFileList(root, (char*)"LittleFS", (char*)".gz");

  fileIndexLittleFS = fileIndex;

  size_t n = sizeof(speedSD) / sizeof(speedSD[0]);

  if (speedSDCurrent == -1) {
    M5.Displays(display).fillScreen(TFT_BLACK);
    M5.Displays(display).setFont(&tahoma8pt7b);
    M5.Displays(display).setTextColor(TFT_DARKGRAY, TFT_BLACK);
    M5.Displays(display).setTextDatum(CC_DATUM);
    M5.Displays(display).setTextPadding(320);

    for (uint8_t s = 0; s < n; s++) {
      Serial.printf("Test %lu Mhz\n", speedSD[s] / 1000000);
      if (SD.begin(GPIO_NUM_4, SPI, speedSD[s])) {
        root = SD.open("/");
        getFileList(root, (char*)"SD", (char*)".bin");
        root = SD.open("/");
        getFileList(root, (char*)"SD", (char*)".gz");
      }
      Serial.printf("File index %d\n", fileIndex);
      if (fileIndex > fileIndexLittleFS) {
        speedSDCurrent = s;
        break;
      }
      // sprintf(speedDot, "%.*s", s + 1, ".....");
      // M5.Displays(display).drawString(speedDot, 160 + offsetX, 20 + offsetY);
      SD.end();
      // delay(100);
    }
  } else {
    Serial.printf("SD ready at %lu Mhz\n", speedSD[speedSDCurrent] / 1000000);
    if (SD.begin(GPIO_NUM_4, SPI, speedSD[speedSDCurrent])) {
      root = SD.open("/");
      getFileList(root, (char*)"SD", (char*)".bin");
      root = SD.open("/");
      getFileList(root, (char*)"SD", (char*)".gz");
    }
  }

  if (fileIndex != 0) {
    M5.Displays(display).fillScreen(TFT_BLACK);

    M5.Displays(display).setFont(&tahoma8pt7b);
    M5.Displays(display).setTextColor(TFT_DARKGRAY, TFT_BLACK);
    M5.Displays(display).setTextDatum(CC_DATUM);
    M5.Displays(display).setTextPadding(320);
    M5.Displays(display).drawString(version, 160 + offsetX, 20 + offsetY);
    M5.Displays(display).drawString("Current Firmware", 160 + offsetX, 170 + offsetY);
    M5.Displays(display).drawString(String(NAME) + " V" + String(VERSION), 160 + offsetX, 190 + offsetY);
    M5.Displays(display).drawString("Developed by " + String(AUTHOR), 160 + offsetX, 210 + offsetY);
    M5.Displays(display).drawRect(20 + offsetX, 28 + offsetY, 280, 10, TFT_DARKGRAY);

    for (uint16_t i = 0; i < TIMEOUT_BIN_LOADER * 10; i++) {
      gauge = map(i, 0, (TIMEOUT_BIN_LOADER * 10) - 1, 0, 276);
      if (gauge != 0) {
        for (uint8_t j = 0; j <= 5; j++) {
          M5.Displays(display).drawGradientHLine(22 + offsetX, 30 + offsetY + j, gauge, TFT_BLACK, TFT_GREEN);
        }

        for (uint16_t j = 1; j < gauge; j++) {
          if (j % 23 == 0) {
            M5.Displays(display).drawFastVLine(22 + j + offsetX, 30 + offsetY, 6, TFT_BLACK);
          }
        }
      }

      ESC = true;
      
      getButton();

      if (M5.getDisplayCount() > 1) {
        M5.Displays(display).drawPng(hdmiplug, sizeof(hdmiplug), 128 + offsetX, 88 + offsetY, 64, 64);

        if (btnESC)           // Escape HDMI
        {
          display = !display;  // Logical operator
          preferences.putUInt("hdmi", display);
          M5.setPrimaryDisplay(display);
          ESP.restart();
        }
      }

      // Continue
      if (i % 5 == 0) {
        M5.Displays(display).setTextFont(1);
        M5.Displays(display).setTextSize(1);
        if (blink == false) {
          M5.Displays(display).drawString("Short press middle button to enter", 160 + offsetX, 50 + offsetY);
          if (M5.getDisplayCount() > 1) {
            if (M5.getBoard() == m5::board_t::board_M5Stack) {
              if (display == 1) {
                M5.Displays(display).drawString("Long press middle button to exit HDMI", 160 + offsetX, 70 + offsetY);
              } else {
                M5.Displays(display).drawString("Long press middle button to enter HDMI", 160 + offsetX, 70 + offsetY);
              }
            } else if (M5.getBoard() == m5::board_t::board_M5StackCore2 ||
                       M5.getBoard() == m5::board_t::board_M5StackCoreS3) {
              if (display == 1) {
                M5.Displays(display).drawString("Short press Power button to exit HDMI", 160 + offsetX, 70 + offsetY);
              } else {
                M5.Displays(display).drawString("Short press Power button to enter HDMI", 160 + offsetX, 70 + offsetY);
              }
            }
          }
          blink = true;
        } else {
          M5.Displays(display).drawString("", 160 + offsetX, 50 + offsetY);
          M5.Displays(display).drawString("", 160 + offsetX, 70 + offsetY);
          blink = false;
        }
      }

      if (btnA || btnC) {
        SD.end();  // If not Bluetooth doesn't work !!!
        return;
      } else if (btnB) {
        click = true;
        M5.Displays(display).fillScreen(TFT_BLACK);
        break;
      }

      vTaskDelay(100);
    }
  }

  while (click == true) {
    while (btnB != 0) {
      getButton();
      vTaskDelay(100);
    }

    M5.Displays(display).setTextColor(TFT_WHITE, TFT_BLACK);
    M5.Displays(display).setTextDatum(CC_DATUM);
    M5.Displays(display).drawString(version, 160 + offsetX, 20 + offsetY);

    getButton();

    if (btnESC)  // Escape
    {
      ESC = false;
      return;
    }

    if (btnA) {
      if (cursor > 0) {
        cursor--;
        if (cursor < limit) {
          start = 0;
        }
      }
    } else if (btnC) {
      if (cursor < (fileIndex - 1)) {
        cursor++;
        if (cursor >= limit) {
          start++;
        }
      }
    } else if (btnB) {
      M5.Displays(display).fillScreen(TFT_BLACK);
      M5.Displays(display).setFont(&tahoma8pt7b);
      M5.Displays(display).setTextColor(TFT_WHITE, TFT_BLACK);
      M5.Displays(display).setTextDatum(CC_DATUM);
      M5.Displays(display).setTextPadding(320);
      M5.Displays(display).drawString(version, 160 + offsetX, 20 + offsetY);

      M5.Displays(display).drawRect(20 + offsetX, 28 + offsetY, 280, 10, TFT_WHITE);

      SDUCfg.setProgressCb(myProgressFunction);
      SDUCfg.setWaitForActionCb(myActionTrigger);

      pos = String(fileName[cursor]).indexOf('/');

      switch (pos) {
        case 8:
          M5.Displays(display).drawString(String(fileName[cursor]).substring(pos + 1), 160 + offsetX, 100 + offsetY);
          if (String(fileName[cursor]).substring(String(fileName[cursor]).length() - 3) == ".gz") {
            file               = LittleFS.open(String(fileName[cursor]).substring(pos), "r");
            gzUncompressedSize = getUncompressedSize(file);
            Serial.printf(">>>>>>> %lu\n", gzUncompressedSize);
          }
          checkSDUpdater(
            LittleFS,                                 // filesystem (default=SD)
            String(fileName[cursor]).substring(pos),  // path to binary (default=/menu.bin, empty string=rollback only)
            10000,         // wait delay, (default=0, will be forced to 2000 upon ESP.restart() )
            TFCARD_CS_PIN  // (usually default=4 but your mileage may vary)
          );
          break;
        case 2:
          M5.Displays(display).drawString(String(fileName[cursor]).substring(pos + 1), 160 + offsetX, 100 + offsetY);
          if (String(fileName[cursor]).substring(String(fileName[cursor]).length() - 3) == ".gz") {
            file               = SD.open(String(fileName[cursor]).substring(pos), "r");
            gzUncompressedSize = getUncompressedSize(file);
            Serial.printf(">>>>>>> %lu\n", gzUncompressedSize);
          }
          checkSDUpdater(
            SD,                                       // filesystem (default=SD)
            String(fileName[cursor]).substring(pos),  // path to binary (default=/menu.bin, empty string=rollback only)
            1000,          // wait delay, (default=0, will be forced to 2000 upon ESP.restart() )
            TFCARD_CS_PIN  // (usually default=4 but your mileage may vary)
          );
          break;
      }
      ESP.restart();
    }

    cursor = (cursor < 0) ? fileIndex - 1 : cursor;
    cursor = (cursor > fileIndex - 1) ? 0 : cursor;

    if (start > cursor) {
      start = cursor;
    }

    stop = start + limit;

    if (stop > fileIndex) {
      stop = fileIndex;
    }

    if (change != cursor) {
      change = cursor;

      // Serial.printf("%d %d %d %d %d\n", start, stop, cursor, limit, fileIndex);
      Serial.printf("%02d %02d %02d\n", start, stop, cursor);

      uint8_t i = 0;
      for (uint8_t j = start; j < stop; j++) {
        M5.Displays(display).setTextPadding(180);
        M5.Displays(display).setTextColor(TFT_DARKGRAY, TFT_BLACK);
        pos = String(fileName[j]).indexOf('/');
        switch (pos) {
          case 8:
            tmpName = String(fileName[j]).substring(pos + 1);
            if (j == cursor) {
              icon = 0;
              M5.Displays(display).setTextColor(TFT_WHITE, TFT_BLACK);
              tmpName = ">> " + tmpName + " <<";
              M5.Displays(display).drawString("LittleFS Flash Storage", 160 + offsetX, 50 + offsetY);
            }
            break;
          case 2:
            tmpName = String(fileName[j]).substring(pos + 1);
            if (j == cursor) {
              icon = 1;
              M5.Displays(display).setTextColor(TFT_WHITE, TFT_BLACK);
              tmpName = ">> " + tmpName + " <<";
              M5.Displays(display).drawString("SD Card Storage", 160 + offsetX, 50 + offsetY);
            }
            break;
        }

        M5.Displays(display).setTextPadding(320);
        M5.Displays(display).drawString(tmpName, 160 + offsetX, 80 + offsetY + i * 20);
        M5.Displays(display).setTextPadding(180);
        if (icon != iconOld) {
          iconOld = icon;
          M5.Displays(display).fillRect(4 + offsetX, 4 + offsetY, 64, 64, TFT_BLACK);
          switch (icon) {
            case 0:
              M5.Displays(display).drawPng(ram, sizeof(ram), 4 + offsetX, 4 + offsetY, 64, 64);
              break;

            case 1:
              M5.Displays(display).drawPng(sd, sizeof(sd), 4 + offsetX, 4 + offsetY, 64, 64);
              break;
          }
        }
        i++;
      }
    }
    vTaskDelay(100);
  }
  SD.end();  // If not Bluetooth doesn't work !!!
  ESC = false;
}